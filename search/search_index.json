{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Timerdo","text":"<p>A minimalist to-do list with built-in timer to keep your tasks on track. </p> <p>Timerdo is an intuitive CLI application that will help you focus on what really matters.</p>"},{"location":"#requirements","title":"Requirements","text":"<p>Python 3.11+</p> <p>No fear of the command-line interface .</p> <p>Source Code: https://github.com/caiomts/timerdo  </p> <p>Documentation: http://caiomts.github.io/timerdo</p> <p> Early stage project1</p> UNLICENSE <p>This is free and unencumbered software released into the public domain.</p> <p>Anyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means.</p> <p>In jurisdictions that recognize copyright laws, the author or authors of this software dedicate any and all copyright interest in the software to the public domain. We make this dedication for the benefit of the public at large and to the detriment of our heirs and successors. We intend this dedication to be an overt act of relinquishment in perpetuity of all present and future rights to this software under copyright law.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p> <p>For more information, please refer to http://unlicense.org/</p> <ol> <li> <p>Data models are mostly stable, but visualization and queries are in full development and the API can change quickly.\u00a0\u21a9</p> </li> </ol>"},{"location":"cli_reference/","title":"<code>timerdo</code>","text":"<p>Timerdo is a minimalist to-do list with built-in timer to keep your tasks on track.</p> <p>Usage:</p> <pre><code>$ timerdo [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>-v, --version</code>: Print version.</li> <li><code>--install-completion</code>: Install completion for the current shell.</li> <li><code>--show-completion</code>: Show completion for the current shell, to copy it or customize the installation.</li> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>delete</code>: Delete item, given table and item id.</li> <li><code>edit</code>: Edit task or timer entries.</li> <li><code>query</code>: Query the data with sql script and return...</li> <li><code>report</code>: Print reports.</li> <li><code>start</code>: Start timer.</li> <li><code>stop</code>: Stop running timer.</li> <li><code>task</code>: Add a task to the To-Do list.</li> </ul>"},{"location":"cli_reference/#timerdo-delete","title":"<code>timerdo delete</code>","text":"<p>Delete item, given table and item id.</p> <p>Usage:</p> <pre><code>$ timerdo delete [OPTIONS] TABLE:{task|timer} ID\n</code></pre> <p>Arguments:</p> <ul> <li><code>TABLE:{task|timer}</code>: Table containing the item.  [required]</li> <li><code>ID</code>: Item id.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli_reference/#timerdo-edit","title":"<code>timerdo edit</code>","text":"<p>Edit task or timer entries.</p> <p>Usage:</p> <pre><code>$ timerdo edit [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>task</code>: Edit a task item.</li> <li><code>timer</code>: Edit a timer item.</li> </ul>"},{"location":"cli_reference/#timerdo-edit-task","title":"<code>timerdo edit task</code>","text":"<p>Edit a task item.</p> <p>Usage:</p> <pre><code>$ timerdo edit task [OPTIONS] ID\n</code></pre> <p>Arguments:</p> <ul> <li><code>ID</code>: Item id.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-t, --task TEXT</code>: Task</li> <li><code>--tag TEXT</code>: Task tag.</li> <li><code>-d, --deadline [%Y-%m-%d]</code>: Task Deadline.</li> <li><code>-s, --status [To Do|Doing|Done]</code>: Task Status.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli_reference/#timerdo-edit-timer","title":"<code>timerdo edit timer</code>","text":"<p>Edit a timer item.</p> <p>Usage:</p> <pre><code>$ timerdo edit timer [OPTIONS] ID\n</code></pre> <p>Arguments:</p> <ul> <li><code>ID</code>: Item id.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-c, --create_at [%Y-%m-%d %H:%M:%S]</code>: timer start.</li> <li><code>-f, --finished_at [%Y-%m-%d %H:%M:%S]</code>: timer stop.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli_reference/#timerdo-query","title":"<code>timerdo query</code>","text":"<p>Query the data with sql script and return a json.</p> <p>Usage:</p> <pre><code>$ timerdo query [OPTIONS] SCRIPT\n</code></pre> <p>Arguments:</p> <ul> <li><code>SCRIPT</code>: sql script.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli_reference/#timerdo-report","title":"<code>timerdo report</code>","text":"<p>Print reports.</p> <p>Usage:</p> <pre><code>$ timerdo report [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-d, --done</code>: Return also tasks with Done status.</li> <li><code>-t, --tag TEXT</code>: Filter tags.</li> <li><code>-i, --init [%Y-%m-%d]</code>: Timeframe's lower boundary.</li> <li><code>-e, --end [%Y-%m-%d]</code>: Timeframe's upper boundary.</li> <li><code>-o, --order-by TEXT</code>: Column to order by.</li> <li><code>-a, --asc</code>: If ordered by it will be in ascending order.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli_reference/#timerdo-start","title":"<code>timerdo start</code>","text":"<p>Start timer.</p> <p>Usage:</p> <pre><code>$ timerdo start [OPTIONS] TASK_ID\n</code></pre> <p>Arguments:</p> <ul> <li><code>TASK_ID</code>: task id for timing.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli_reference/#timerdo-stop","title":"<code>timerdo stop</code>","text":"<p>Stop running timer.</p> <p>Usage:</p> <pre><code>$ timerdo stop [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-d, --done</code>: Set the task to Done.  [required]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli_reference/#timerdo-task","title":"<code>timerdo task</code>","text":"<p>Add a task to the To-Do list.</p> <p>Usage:</p> <pre><code>$ timerdo task [OPTIONS] TASK\n</code></pre> <p>Arguments:</p> <ul> <li><code>TASK</code>: Task to be add to To-Do list.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-t, --tag TEXT</code>: Task tag.</li> <li><code>-d, --deadline [%Y-%m-%d]</code>: Task Deadline.</li> <li><code>-s, --status [To Do|Doing|Done]</code>: Task Status.  [default: To Do]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"install/","title":"Installing Timerdo","text":"<p>Timerdo is a CLI application 100% written in Python. So, if you're a Python user, you can easily install Timerdo.</p>"},{"location":"install/#with-pipx-recommended","title":"with pipx recommended","text":"<pre><code>$ pipx install timerdo\n</code></pre> <p>If you've never used pipx1 before, do yourself a favor and just install it . </p>"},{"location":"install/#with-pip","title":"with pip","text":"<pre><code>$ pip install timerdo\n</code></pre> <p>If you already tried pipx but somehow don't like it you can  stick with the classic <code>pip install</code>.</p>"},{"location":"install/#verifying-your-installation","title":"verifying Your Installation","text":"<pre><code>$ timerdo\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                                           \u2502\n\u2502 Timerdo is a minimalist to-do list with built-in timer to keep your tasks on track.       \u2502\n\u2502                                                                                           \u2502\n\u2502 To get started call `$ timerdo --help` or read the documentation at                       \u2502\n\u2502 https://caiomts.github.io/timerdo/                                                        \u2502\n\u2502                                                                                           \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>If your output is similar to the one highlighted above, you're good .</p> <p>If not, you may have an older version. Let's try this:</p> <pre><code>$ timerdo --version\nTimerdo version: 0.0.4\n</code></pre> <p>If you have an older version, just follow along.</p>"},{"location":"install/#upgrading-timerdo","title":"Upgrading Timerdo","text":""},{"location":"install/#with-pipx-recommended_1","title":"with pipx recommended","text":"<pre><code>$ pipx upgrade timerdo\n</code></pre>"},{"location":"install/#with-pip_1","title":"with pip","text":"<pre><code>$ pip install --upgrade timerdo\n</code></pre> <p>Now that everything is up and running, you can get started with Timerdo by moving on to the next section.</p> <ol> <li> <p>Pipx installs CLI apps in isolated environments and exposes the entry points to your <code>PATH</code> so you can call them directly with no concerns if you are in the right python env or not, without dependency conflicts and clean uninstalls .\u00a0\u21a9</p> </li> </ol>"},{"location":"start/","title":"Getting Started","text":"<p>Warning</p> <p>Making sure you have Timerdo entry point in your <code>PATH</code>. If you are not sure, go back to installing Timerdo. </p>"},{"location":"start/#adding-your-first-task","title":"Adding Your First Task","text":"<p>The very first step when you start using Timerdo is to write down your tasks and it's simple as:</p> <p><pre><code>$ timerdo task \"&lt;your task goes here&gt;\"\n</code></pre> Timerdo runs silently. No return is a good return.  Your first task will get <code>id = 1</code>, the next one <code>id = 2</code> and so on...</p> <p>I'll show you in a bit how to retrieve your tasks. But let's first work on in your first task.</p>"},{"location":"start/#starting-the-timer","title":"Starting The Timer","text":"<p>To start a timer you need just your task id. Let's say your <code>id</code> is 1, as you're starting a timer for the first task you've just written to your to do list.</p> <p><pre><code>$ timerdo start 1\n</code></pre> Again, no return is a good return. The timer is now running. Let's say you've just finished your task for now. </p>"},{"location":"start/#stopping-the-timer","title":"Stopping The Timer","text":"<p>To stop the timer you don't need any information, Timerdo already knows what to do. I mean, Timerdo almost know what to do. It will raise a question about whether or note the task is done.</p> <p><pre><code>$ timerdo stop\nDone [y/n]: n\n</code></pre> No return. You already know... </p> Info <p>We already know that Timerdo runs silently, but let's see what happens if something goes wrong. Let's say you don't know you stopped the timer or not and you try to stop it again:</p> <p><pre><code>$ timerdo stop\nDone [y/n]: n\n\ud83d\udca5\ufe0f No timer running.\n</code></pre> Timerdo try to catch errors and exceptions and only gives you back a useful message.</p>"},{"location":"start/#reporting-your-tasks","title":"Reporting your tasks","text":"<p>Now that you already know how Timerdo works, let's see how you can read your data.</p> <pre><code>$ timerdo report\n\nfrom 1789-07-14 until 2023-05-04\n\n\ud83c\udff7\ufe0f      ---   0 days 00:04:08                    \u256d\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 ID \u2502       Date \u2502 Task                  \u2502 Deadline \u2502 Status \u2502      Time       \u2502\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  1 \u2502 2023-05-04 \u2502 &lt;your task goes here&gt; \u2502          \u2502 Doing  \u2502 0 days 00:04:08 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> Info <p>In real life the returns are much prettier as you can see in the example below. However, I prefer keep it as simple as code blocks and not clutter too much the documentation. </p>"},{"location":"start/#digging-into-the-report","title":"Digging into the report","text":"<p>Let's start by the highlights outside the table. the line 4 show us the period of timers Timerdo took into account to aggregate times. which means that all timers between those dates were considered in the report.</p> <p>The \ud83c\udff7\ufe0f in line 7 is a tag mark. You can tag your tasks and when Timerdo report them it will break the report down per tags given, also giving you the time spent per tag. You can also filter which tags you are interested in .</p> <p>In the table header you have two more information: Deadline and Status. Deadline is empty, but Status is always defaults to To Do when you create a new task and changes to Doing when you start the timer for the first time.</p> <p>Now that you know the basics, you can start using Timerdo.  However, Timerdo has more features that you might already be missing. Let's dig into all this functionalities in the next section.</p>"},{"location":"tutorial_1/","title":"User Guide (CUD of CRUD Tasks) - Timer, Delete and Update","text":"<p>CRUD is an acronym. They are the four basic operations for persistent storage1</p> <p>TL;DR</p> <p>In this section we'll discuss all the features in depth so if you are already using Timerdo and in a hurry, just go straight to any section or to the reference.</p> <p>Technicalities</p> <p>If you are not into Python or Timerdo internals you should skip all these notes.</p>"},{"location":"tutorial_1/#tasks","title":"Tasks","text":"<p>We already know how to create a simple task. But how to add Deadline or tag your task?</p> <p>All good CLI applications have a <code>--help</code> flag to help you.  They're usually short and don't replace a User Manual or Guide,  but they're a good start and perfect for quickly remembering things.</p> <pre><code>$ timerdo task --help\n\nUsage: timerdo task [OPTIONS] TASK                                                          Add a task to the To-Do list.                                                               \u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    task      TEXT  Task to be add to To-Do list. [default: None] [required]             \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --tag       -t      TEXT                Task tag. [default: None]                         \u2502\n\u2502 --deadline  -d      [%Y-%m-%d]          Task Deadline. [default: None]                    \u2502\n\u2502 --status    -s      [To Do|Doing|Done]  Task Status. [default: To Do]                     \u2502\n\u2502 --help                                  Show this message and exit.                       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>Let's start with line 3. In lower case you see the command we passed to the terminal <code>timerdo task</code>.  In upper case <code>[OPTIONS]</code> and <code>TASK</code>. What does it means? </p> <p>Both are listed in <code>Arguments</code> and <code>Options</code> tables just below.  In this case, we have a positional argument <code>TASK</code> which is required (as you can see on line 8).  <code>TASK</code> has a defined type (<code>TEXT</code>) and is literally a text that describes the task you'd like to add to the list.</p> <p>The table <code>Options</code> has 4 options, none of them are required and that's how we could add a task in the previous section just by describing it. The last option is the <code>--help</code>. This option will overide everything and just show the same message above.</p> Call for <code>--help</code> <p>Call for <code>--help</code> at any time. All commands have their own help page as well. <pre><code>$ timerdo --help\n\nUsage: timerdo [OPTIONS] COMMAND [ARGS]...                                                  Timerdo is a minimalist to-do list with built-in timer to keep your tasks on track.         \u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --version             -v        Print version.                                            \u2502\n\u2502 --install-completion            Install completion for the current shell.                 \u2502\n\u2502 --show-completion               Show completion for the current shell, to copy it or      \u2502\n\u2502                                 customize the installation.                               \u2502\n\u2502 --help                          Show this message and exit.                               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 delete      Delete item, given table and item id.                                         \u2502\n\u2502 edit        Edit task or timer entries.                                                   \u2502\n\u2502 query       Query the data with sql script and return a json.                             \u2502\n\u2502 report      Print reports.                                                                \u2502\n\u2502 start       Start timer.                                                                  \u2502\n\u2502 stop        Stop running timer.                                                           \u2502\n\u2502 task        Add a task to the To-Do list.                                                 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre></p>"},{"location":"tutorial_1/#tag","title":"tag","text":"<p>Let's take a look at line 11. <code>--tag</code> is the Task tag, defaults to <code>None</code> and has a defined type (<code>TEXT</code>). Let's see how it works in practice.</p> <p><pre><code>$ timerdo task \"my very new task with options\" --tag \"user guide tag\"\n$ timerdo report\n\nfrom 1789-07-14 until 2023-05-04\n\n\ud83c\udff7\ufe0f      ---   0 days 00:04:08                    \u256d\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 ID \u2502       Date \u2502 Task                  \u2502 Deadline \u2502 Status \u2502      Time       \u2502\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  1 \u2502 2023-05-04 \u2502 &lt;your task goes here&gt; \u2502          \u2502 Doing  \u2502 0 days 00:04:08 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\ud83c\udff7\ufe0f   User Guide Tag   ---   0 days 00:00:00                        \u256d\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 ID \u2502       Date \u2502 Task                          \u2502 Deadline \u2502 Status \u2502      Time       \u2502\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  2 \u2502 2023-05-04 \u2502 My Very New Task With Options \u2502          \u2502 To Do  \u2502 0 days 00:00:00 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> Now when you call for <code>report</code>, Timerdo wraps the tags. Instead of using <code>--tag</code> you can also use the shortcut <code>-t</code> - you know too many letters to type .</p>"},{"location":"tutorial_1/#deadline","title":"deadline","text":"<p>At line 12, <code>--deadline</code> has a different type (<code>[%Y-%m-%d]</code>). In this case, It's a date type and the structure is year-month-day as in 1789-07-14.</p> <p>Let's try it out:</p> <p><pre><code>$ timerdo task \"my second task with options\" --tag \"user guide tag\" -d 2023-05-10\n$ timerdo report\n    --/-- More things above --/--\n\n\u256d\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 ID \u2502       Date \u2502 Task                        \u2502   Deadline \u2502 Status \u2502      Time       \u2502\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  3 \u2502 2023-05-04 \u2502 My Second Task With Options \u2502 2023-05-10 \u2502 To Do  \u2502 0 days 00:00:00 \u2502\n\n--/-- More things below --/--\n</code></pre> Here we used the <code>--deadline</code> shortcut (<code>-d</code>).</p> Technicalities <p><code>--deadline</code> is in the CLI API a <code>datetime</code> and not a <code>date</code> as Typer - the library for building CLI apps I used - doesn't support <code>date</code>.  However the Timerdo core treats it as a <code>date</code> and the data model maps it as <code>date</code> as well.</p>"},{"location":"tutorial_1/#status","title":"status","text":"<p><code>--status</code> is the last option we can use with <code>task</code> command.  It has a pre-defined type (<code>[To Do|Doing|Done]</code>) and defaults to <code>To Do</code>.</p> <p>Let's try a new task:</p> <p><pre><code>$ timerdo timerdo task \"my second task with options\" --Status \"to do\"\nUsage: timerdo task [OPTIONS] TASK\nTry 'timerdo task --help' for help.\n\u256d\u2500 Error \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Invalid value for '--status' / '-s': 'to do' is not one of 'To Do', 'Doing', 'Done'.      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> It raised an error. Why?</p> <p>You must precisely \"To Do\" instead of \"to do\". <code>--status</code> is case sensitive.</p> Technicalities <p>Here who raised an error was Typer and not Timerdo. Typer is fully typed and <code>status</code> must receive a Status object.</p> models.py<pre><code>class Status(StrEnum):\n\"\"\"Status class.\"\"\"\nto_do = 'To Do'\ndoing = 'Doing'\ndone = 'Done'\n</code></pre> <p>In the next topics we'll come back to the <code>status</code> option to set it properly.</p>"},{"location":"tutorial_1/#timer","title":"Timer","text":"<p>You already know everything about Timer. It has only 2 commands <code>start</code>  and <code>stop</code>. To start the timer you need to let it know the task you're going to work on and to stop whether or not your task is done.</p>"},{"location":"tutorial_1/#start","title":"start","text":"<p>Let's see the <code>--help</code> one more time.</p> <pre><code>$ timerdo start --help\n\nUsage: timerdo start [OPTIONS] TASK_ID                                                      Start timer.                                                                                \u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    task_id      INTEGER  task id for timing. [default: None] [required]                 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help          Show this message and exit.                                               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p><code>task_id</code> is a integer and also a required argument. It is the <code>id</code> of one task in your to do list.</p>"},{"location":"tutorial_1/#stop","title":"stop","text":"<p>To stop the timer you don't need any argument, but you can flag beforehand if your task was done or not using the flag <code>--done</code> or the shortcut <code>-d</code>.</p> <p>Let's see how to flag it.</p> <pre><code>$ timerdo stop --done\n</code></pre> <p>Flag is the same as calling an option with no variable. as simple as that.</p> Tip <p>Flag are usually used for boolean variables. When you flag something you are saying that it's <code>TRUE</code>.</p>"},{"location":"tutorial_1/#delete","title":"delete","text":"<p>Until now you didn't make a mistake . But you know, humans make mistakes. Let's say your are human and made a miskate. The very first solution is to throw it away.</p> <p>To delete a entry you have 2 arguments <code>table</code> and <code>id</code>.</p> <p><code>table</code> are: <code>[task|timer]</code>. It works in the same way of <code>status</code>. <code>id</code> you already know. Each table has its own ids.</p> <pre><code>$ timerdo delete timer 1\n$ timerdo report\n    --/-- More things above --/--                                            \u256d\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 ID \u2502       Date \u2502 Task                  \u2502 Deadline \u2502 Status \u2502      Time       \u2502\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  1 \u2502 2023-05-04 \u2502 &lt;your task goes here&gt; \u2502          \u2502 Doing  \u2502 0 days 00:00:00 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n    --/-- More things below --/--\n</code></pre> Warning <p>If you delete a task, all timers linked to that task will be deleted as well.</p> <p>Sometimes everything is almost correctly and you don't want to delete everything. The next topic will show you how to update your data.</p> Under construction  <p>Up to this point you can query using sql script (I'll show later on) to create personal reports. it returns a json. </p> <p>This is, so far, the only way to view the Timer table.</p> <p>You can copy and past the script when the time comes: \"SELECT * FROM timer_list\"</p> <p>These are the planned steps:</p> <p>Reports</p> <ul> <li> Create one simple timer reports with period filter.</li> <li> Create one simple task report with period filter.</li> <li> Create a CLI entry point to call both functions from one subcommand (like edit or delete).</li> </ul> <p>Delete</p> <ul> <li> Update delete function to delete batches by tag.</li> <li> Update delete function to delete by creation period.</li> </ul>"},{"location":"tutorial_1/#update","title":"Update","text":"<p>In Timerdo you can <code>edit</code> both tables, but one row at a time. You have basically two commands <code>task</code> and <code>timer</code> and each one you have a required argument <code>id</code>, or the row you want to edit, and as options as the number of columns in the table. Now you already know how to can call <code>--help</code>, you can call each in each commant to see all possibilities.</p> <p>Let's see the <code>--help</code> for Timer as we didn't see the structure before.</p> <pre><code>$ timerdo edit timer --help\n\nUsage: timerdo edit timer [OPTIONS] ID                                                      Edit a timer item.                                                                          \u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    id      INTEGER  Item id. [default: None] [required]                                 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --create_at    -c      [%Y-%m-%d %H:%M:%S]  timer start. [default: None]                  \u2502\n\u2502 --finished_at  -f      [%Y-%m-%d %H:%M:%S]  timer stop. [default: None]                   \u2502\n\u2502 --help                                      Show this message and exit.                   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>You can edit two variables <code>--created_at</code> and <code>--finished_at</code>, or the moment you start and stop the Timer. the structure is similar to date in deadline, but now you need to set also hour:minutes:seconds (<code>%H:%M:%S</code>) and the format is \"1789-07-14 22:20:10\".</p> <p>Now you know how to Create, Update and Delete in depth, let's deep dive into how to <code>report</code> and <code>query</code> your data in the next section.</p> <ol> <li> <p>Persistence is the characteristic of data that outlive the process that created it.  In Timerdo, we are talking about the basic operations to interact with our database.\u00a0\u21a9</p> </li> </ol>"},{"location":"tutorial_2/","title":"User Guide  (R of CRUD) - Retrieve Your Data.","text":"<p>Currently Timerdo has to ways to retrieve your data through CLI entry points.  The first way is the standard way of doing it. The second way has two goals:  to give you total freedom and control over your own data and  to work as compatible output to pipe as input into another CLI application.</p> Technicalities <p>When using CLI applications, it is quite common to use different applications in sequence. Output from one application is used as input to another application. Connecting applications is like building a \"pipeline\" so you need to use \"pipes\" (&gt; or &gt;&gt;) to direct an output as an input to the next application. I'll show an example when explaining the <code>query</code> Timerdo command.</p>"},{"location":"tutorial_2/#report","title":"Report","text":"<p><code>report</code> is the standard way to retrieve your data. It has one print pattern that you already know and 5 options to fine-tune your report. Here we'll stick to the code blocks as they are easier to show off things and don't clutter the documentation, but remember that the real one is fancier than this one.</p> <p><code>report</code> group your tasks per <code>tag</code>. In the example below we have three different tags, thus 3 different tables. </p> <pre><code>$ timerdo report\n                                                             from 1789-07-14 until 2023-05-08\n\n\ud83c\udff7\ufe0f   Customer   ---   0 days 01:04:02                             \u256d\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 ID \u2502       Date \u2502 Task                            \u2502   Deadline \u2502 Status \u2502      Time       \u2502\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  3 \u2502 2023-05-08 \u2502 White Interesting Bag Machine   \u2502 1998-02-08 \u2502 Doing  \u2502 0 days 00:10:42 \u2502\n\u2502    \u2502            \u2502 Store.                          \u2502            \u2502        \u2502                 \u2502\n\u2502  2 \u2502 2023-05-08 \u2502 Certain Follow Plant.           \u2502 1996-07-07 \u2502 Doing  \u2502 0 days 00:02:00 \u2502\n\u2502  1 \u2502 2023-05-08 \u2502 Leave Option President Bag      \u2502 2022-02-16 \u2502 Doing  \u2502 0 days 00:51:20 \u2502\n\u2502    \u2502            \u2502 Identify Last History Strategy. \u2502            \u2502        \u2502                 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\ud83c\udff7\ufe0f   Speech   ---   0 days 01:31:35                             \u256d\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 ID \u2502       Date \u2502 Task                           \u2502   Deadline \u2502 Status \u2502      Time       \u2502\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  8 \u2502 2023-05-08 \u2502 Campaign Learn Picture Send.   \u2502 1994-11-12 \u2502 Doing  \u2502 0 days 01:11:02 \u2502\n\u2502  7 \u2502 2023-05-08 \u2502 Something Life Pm Month.       \u2502 2015-01-20 \u2502 Doing  \u2502 0 days 00:20:33 \u2502\n\u2502  6 \u2502 2023-05-08 \u2502 Own Together Speech Major Guy. \u2502 2002-03-24 \u2502 Doing  \u2502 0 days 00:00:00 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\ud83c\udff7\ufe0f   Tv   ---   0 days 00:00:00                                \u256d\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 ID \u2502       Date \u2502 Task                            \u2502   Deadline \u2502 Status \u2502      Time       \u2502\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  5 \u2502 2023-05-08 \u2502 Throw Small Source.             \u2502 2013-08-02 \u2502 To Do  \u2502 0 days 00:00:00 \u2502\n\u2502  4 \u2502 2023-05-08 \u2502 Place Identify Best Project     \u2502 1994-02-02 \u2502 To Do  \u2502 0 days 00:00:00 \u2502\n\u2502    \u2502            \u2502 Drop Fight Democrat.            \u2502            \u2502        \u2502                 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"tutorial_2/#report-time-frame","title":"Report Time frame","text":"<p>In the second line of the report we have the time frame that was took into consideration to generate the report. Every <code>timer</code> within the time frame was added to generate the report.</p> <p>You can set the lower boundary with <code>--init</code> (shortcut: <code>-i</code>) and the upper boundary with <code>--end</code> (shortcut: <code>-e</code>).</p> Warning <ol> <li> <p>The range is mathematically defined as [initial; final). Which means that all timers equal to or greater than the initial one are considered, but only timers less than the final one are considered.</p> </li> <li> <p><code>Timers</code> are defined by date plus time, however you can define the frame using only date, consequently your time is predefined to <code>00:00</code> and you need to always define the next day to aggregate all Previous day's <code>timers</code>.</p> </li> <li> <p>If you don't set the upper boundary it will print today as default, but in this case it'll take into account all <code>timers</code> in the table.</p> </li> </ol>"},{"location":"tutorial_2/#report-per-tag","title":"Report per tag","text":"<p>The header of each table (lines 5, 17 and 27) is represented by the <code>tag</code> in which the tasks were grouped and the total amount of time spent in the <code>tag</code>, in other words, the sum of all times spent in each task  tagged the same way.</p> <p>You can filter your report by tag with the option <code>--tag</code> (shortcut: <code>-t</code>).</p> Tip <p>You can pass how many <code>tags</code> you want using the option <code>--tag</code> for each <code>tag</code>. </p> <pre><code>$ timerdo report --tag \"&lt;your first tag&gt;\" --tag \"&lt;your second tag&gt;\"\n</code></pre>"},{"location":"tutorial_2/#report-done-tasks","title":"Report done tasks","text":"<p>When you call the report with no options, Timerdo will only report uncompleted tasks, but you may need to have also an overview of all tasks. You can flag the <code>--done</code> (shortcut: <code>-d</code>) option to print also <code>Done</code> tasks.</p>"},{"location":"tutorial_2/#order-tasks","title":"Order tasks","text":"<p>You can order or tasks by <code>date</code>, <code>deadline</code>, <code>status</code> and <code>task</code> using the option <code>--order-by</code> (<code>-o</code>) combined with the flag <code>--asc</code> (<code>-a</code>) to ascending order.</p>"},{"location":"tutorial_2/#query","title":"Query","text":"<p>Using the <code>query</code> command, Timerdo gives you superpowers to retrieve your data. This command has only one argument (<code>script</code>) which you can pass any sql script to Timerdo to query your data and create your report. This command generates a JSON that you can also pipe to another application.</p> <p>The following command queries your Timer table and saves it as JSON to a file in your working directory.</p> <pre><code>$ timerdo query \"SELECT * FROM timer_list\" &gt; file_name.json\n</code></pre> Technicalities <p>Timerdo has a SQLite database with two tables: <code>timer_list</code> and <code>todo_list</code>. You can see the models below.</p> models.py<pre><code>class ToDoItem(Base):\n\"\"\"Todo Item class.\"\"\"\n__tablename__ = 'todo_list'\nid = mapped_column(Integer, primary_key=True, init=False)\ntask: Mapped[str] = mapped_column(String)\ntag: Mapped[str | None] = mapped_column(String, default=None)\ndeadline: Mapped[date | None] = mapped_column(Date, default=None)\nstatus: Mapped[Status] = mapped_column(String, default=Status.to_do)\ncreated_at: Mapped[datetime] = mapped_column(\ninsert_default=datetime.utcnow(), default=None\n)\ntimers: Mapped[list['Timer']] = relationship(\nback_populates='todo_item',\ncascade='all, delete-orphan',\ndefault_factory=list,\ninit=False,\n)\nclass Timer(Base):\n\"\"\"Timer item class.\"\"\"\n__tablename__ = 'timer_list'\nid = mapped_column(Integer, primary_key=True, init=False)\ntask_id: Mapped[int] = mapped_column(ForeignKey('todo_list.id'))\ncreated_at: Mapped[datetime] = mapped_column(\ninsert_default=datetime.utcnow(), default=None\n)\nfinished_at: Mapped[datetime | None] = mapped_column(\nDateTime, default=None\n)\ntodo_item: Mapped['ToDoItem'] = relationship(\nback_populates='timers', init=False\n) \n</code></pre>"},{"location":"tutorial_2/#config","title":"Config","text":"Under construction  <p>Up to this point, you cannot save your configuration for reporting or querying your data. Timerdo already has this in mind, but it hasn't been implemented yet.</p> <p>Planned steps:</p> <ul> <li> Create a TOML config layout.</li> <li> upgrade <code>report</code> and <code>query</code> to read config file.</li> </ul> <p>If you are interested in the next \"Technicalities\" you can see how Timerdo has already a function to read the config file and how it finds and saves this file.</p> Technicalities <p>When installing Timerdo and calling it for the first time, Timerdo will try to connect to your database in a default directory (depends on your operating system). If it fails, Timerdo will create the folder and database for you. In order to have full control of your data and be able to move your database or delete the entire Timerdo, you need to know how to find your database. Below I reproduce part of the script that Timerdo uses to manipulate its database.</p> config.py<pre><code>def get_user_dir(dir_data: bool = True) -&gt; Path:\n\"\"\"Get user directories.\"\"\"\nhome = Path.home()\nenv_test = os.environ.get('TIMERDOTEST', '')\nmatch platform.system(), env_test:\ncase 'Windows', '':\nif os.getenv('APPDATA'):\nreturn Path(os.getenv('APPDATA'))\nelse:\nreturn Path(os.getenv('LOCALAPPDATA'))\ncase 'Darwin', '':\nreturn Path(home, 'Library')\ncase _, '':\nif dir_data is True:\nreturn Path(home, '.local/share')\nelse:\nreturn Path(home, '.config')\ncase _, _:\nreturn Path(os.environ['TIMERDOTEST']) / 'TimerdoTest'\ndata_dir = get_user_dir() / 'Timerdo'\nconfig_dir = get_user_dir(dir_data=False)\ndata_dir.mkdir(parents=True, exist_ok=True)\nconfig_dir.mkdir(parents=True, exist_ok=True)\n</code></pre>"}]}